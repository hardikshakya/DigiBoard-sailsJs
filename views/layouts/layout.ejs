<!DOCTYPE html>
<html>
  <head>
    <title>DigiBoard</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <script type="text/javascript">
      window.overlord = { csrf: "<%= _csrf %>" };
    </script>

    <audio id="chatAudio">
      <source src="/sounds/notify.ogg" type="audio/ogg">
      <source src="/sounds/notify.mp3" type="audio/mpeg">
      <source src="/sounds/notify.wav" type="audio/wav">
    </audio>
  </head>

  <body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">

      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
        <a class="navbar-brand" style="font-size: 30px; color: aquamarine;" href="/">DigiBoard</a>
        <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
          <% if (session.authenticated && session.verified) { %>
            <form>
                <input type="text" name="idd" id="user_id_temp" value="<%= session.User.id %>" hidden>
                <input type="hidden" name="_csrf" value="<%= _csrf %>" />
            </form>
            <li class="nav-item active ml-3">
                <a class="nav-link" href="/user/showprofile/<%= session.User.id %>"> <%= session.User.name %> <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
              <input type="number" name="noti" id="notification_bar" value="0" hidden>
              <a class="nav-link" href="#"> Notification <mark class="blue tada" id="notification_bar_anchor" hidden></mark></a>
            </li>

            <% if (session.User.role === 'publisher') { %>
              <li class="nav-item">
                <a class="nav-link" href="/user/indexuser"> User Administration </a>
              </li>
            <% } %>

            <li class="nav-item">
              <a class="nav-link" href="#">Billbords</a>
            </li>
          <% } %>
        </ul>
        <div class="navbar-right">
          <% if (session.authenticated && session.verified) { %>
            <a class="btn btn-outline-warning my-2 my-sm-0 mr-4" href="/session/logout">sign-out</a>
          <% } %>
        </div>
        <% if ((!session.authenticated) && (!session.verified)) { %>
          <form class="form-inline my-2 my-lg-0" action="/session/login">
            <div class="form-group">
              <input type="text" placeholder="Email" name="email" class="form-control ml-2">
            </div>
            <div class="form-group">
              <input type="password" placeholder="Password" name="password" class="form-control ml-2">
            </div>
            <button class="btn btn-outline-success my-2 my-sm-0 ml-2" type="submit">Sign in</button>
            <input type="hidden" name="_csrf" value="<%= _csrf %>" />
          </form>
        <% } %>
      </div>
    </nav>

    <%- body %>

    <div class="container">
      <hr>
      <footer class="footer pull-right">
        <a href="https://github.com/hardikshakya">
          <i class="fa fa-github" style="font-size:20px">
            Hardik Shakya
          </i>
        </a>
        <div>created with love, by hardik</div>
      </footer>
    </div>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/js/jquery.js"></script>
    <script src="/js/jquery.validate.min.js"></script>
    <script src="/js/bootstrap.js"></script>
    <script src="/js/customValidate.js"></script>
    <script src="/js/underscore.js"></script>
    <!--SCRIPTS END-->

    <script type="text/javascript" src="/jst.js"></script>
    <script type="text/javascript">

      io.socket.on('connect', () => {
        console.log('Socket connected!!!');
      });

      const UserIndexPage = {
        statusUpdate: (id, message) => {
          if (message.loggedIn) {
            const $userRow = $('tr[data-id="' + id + '"] td img').first();
            $userRow.attr('src', "/images/icon-online.png");
          } else {
            const $userRow = $('tr[data-id="' + id + '"] td img').first();
            $userRow.attr('src', "/images/icon-offline.png");
          }
        },

        addUser: (user) => {
          // obj is going to encompass both the new user data as well as the _csrf info from
          // the layout.ejs file
          const obj = {
            user: user.data,
            _csrf: window.overlord.csrf || ''
          };

          // Add the template to the bottom of the User Administration Page
          $( 'tr:last' ).after(
            // This is the path to the templates file
            JST['assets/templates/addUser.ejs']( obj )
          );
        },

        // Remove the user from the User Administration Page
        destroyUser: (id) => {
          $('tr[data-id="' + id + '"]').remove();
        }
      };

      const updateUserInDom = (userId, message) => {
        // page I on now
        let page_path = document.location.pathname;

        // Strip trailing slash if we've got one
        page_path = page_path.replace(/(\/)$/, '');

        // Route to the appropriate user update handler based on which page you're on
        switch (page_path) {

          case '/user/indexuser':

            if (message.verb === 'update') {
              UserIndexPage.statusUpdate(userId, message);
            }

            if (message.verb === 'create') {
              UserIndexPage.addUser(message);
              UserIndexPage.statusUpdate(userId, message);
            }

            if (message.verb === 'destroy') {
              UserIndexPage.destroyUser(userId);
            }

            break;
        }
      };

      const displayFlashActivity = (message) => {
        $(document).ready(function(){
          $('#chatAudio')[0].play();
          $(".navbar").after("<div class='alert alert-success'>" + message.name + message.action + "</div>");
          $(".alert").fadeOut(5000);
        });
      }

      const cometMessageReceivedFromServer = (message) => {
        const page_route = document.location.pathname;

        if (String(page_route) === "/session/loginpage" || String(page_route) === "/") {
        } else {
          if (message.model === 'user') {
            const userId = message.id;

            updateUserInDom(userId, message);

            if(message.verb !== "destroy") {
              displayFlashActivity(message);
            }
          }
        }
      }

      const displayFlashReq = (message) => {
        $(document).ready(() => {
          if (message.user_id == document.getElementById("user_id_temp").value) {
            $('#chatAudio')[0].play();
            $(".navbar").after("<div class='alert alert-success'>" + message.msg + "</div>");
            $(".alert").fadeOut(5000);

            let k = parseInt(document.getElementById('notification_bar').value);

            document.getElementById('notification_bar').value = k+1;
            document.getElementById('notification_bar_anchor').innerHTML = document.getElementById('notification_bar').value;
            document.getElementById('notification_bar_anchor').hidden = false;

          }
        });
      }

      io.socket.on('message', cometMessageReceivedFromServer);

      io.socket.get('/user/subscribe', (data, jwr) => {
        if (jwr.error) {
          console.error('Could not subscribe to User-related notifications: ' + jwr.error);
          return;
        }
        if (data == 200) {
          console.log('Successfully subscribed.');
        }
      });

      io.socket.on('user', cometMessageReceivedFromServer);

      io.socket.on('user_banner_actions', displayFlashReq);

    </script>
  </body>
</html>
